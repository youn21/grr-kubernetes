---
header-includes:
    - '\usetheme[titleformat=smallcaps,numbering=none,progressbar=frametitle]{metropolis}'
    - '\usepackage[fixed]{fontawesome5}'
    - '\definecolor{links}{HTML}{661100}'
    - '\hypersetup{colorlinks,linkcolor=,urlcolor=links}'
title: Gestion des secrets avec Kubernetes
subtitle: ""
author: Rémi Cailletaud
date: 15 octobre 2024
institute: ANF Mathrice 2024
#titlegraphic: '`{\hfill\includegraphics[height=1.5cm]{LOGO-JRES-2022.png}`{=latex}'
aspectratio: 169
---

# Les secrets dans l'API Kubernetes

:::::::::::::: {.columns}
::: {.column width="60%"}
* Stockage et gestion des informations sensibles
* Découplage de la définition du pod
  * Réduit le risque d'exposition
  * Stockage en tmpfs
  * Exclusion du SCM (aka gitignoring)
* Utilisation
  * En tant que volume et fichiers
  * En tant que variables d'environnement
:::
::: {.column width="40%"}
\small
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: Ym91aWxsYWJhaXNzZQo=
```
:::
:::::::::::::::

# Le point de vue de l'administrateur

:::::::::::::: {.columns}
::: {.column width="40%"}
![~~chiffrement~~ encodage base64](./meme.jpg){width=200px}

\tiny
\center{Source: in/derekm1215}
:::
::: {.column width="60%"}

## En clair dans les objets API

* Simple encodage base64 — yaml from hell
* L'accès au namespace donne l'accès aux secrets

## En clair dans l'API store (*etcd*) !

* Pas de chiffrement par défaut en vanilla
* RKE2: chiffrement des secrets automatique
* OpenShift/OKD: pas le cas pas par défaut !
:::
:::::::::::::::

# Level 0: création à la main

## Principe

* Exclusion des fichiers contenant des secrets de la gestion de source
* Ajouts des secrets à la main…

:::::::::::::: {.columns}
::: {.column width="40%"}
## Avantages

* Simple
:::
::: {.column width="60%"}
## Inconvénients

* Secrets en clair dans l'API
* Automatisation impossible
* Problématique de la gestion des secrets toujours présente
:::
:::::::::::::::

# Level 1: chiffrement par clé asymétrique

## Principe
* Les secrets sont chiffrés avec une ou plusieurs clés publiques (gpg, age, sops…)
* Clé publique de l'outil de déploiement

:::::::::::::: {.columns}
::: {.column width="40%"}
## Avantages

* Assez simple
* Automatisation partielle
:::
::: {.column width="60%"}
## Inconvénients

* Secrets en clair dans l'API
* Gestion des clés de déploiement:
  * injection ?
  * protection ?
:::
:::::::::::::::

# Level 2: délégation du chiffrement

## Principe
* Les secrets sont chiffrés via un service de chiffrement
* L'outil de déploiement peut s'adresser au service pour déchiffrer
* Exemple : sop+Vault Transit Engine, Bitnami SealedSecrets

:::::::::::::: {.columns}
::: {.column width="40%"}
## Avantages

* Automatisation totale (*cluster boostraping*)
* Protection des clés

:::
::: {.column width="60%"}
## Inconvénients

* Secrets toujours en clair dans l'API
* Mise en place compliquée
:::
:::::::::::::::

# Level 3: injection des secrets via sidecar

## Principe
* Un conteneur sidecar injecte les secrets depuis une source externe dans des volumes au démarrage du pod
* Exemple: Hashicop Vault Agent Injector, Vault CSI provider

:::::::::::::: {.columns}
::: {.column width="40%"}
## Avantages

* Automatisation totale
* Protection des clés
* Secrets pas dans l'API

:::
::: {.column width="60%"}
## Inconvénients

* Mise en place (très) compliquée
* Modification éventuelle des l'applications
:::
:::::::::::::::


# À vous : Bitnami SealedSecrets

```{=latex}
\begin{center}
```
![Bitnami SealedSecrets](./sealedsecrets.drawio.png){width=200px}\
```{=latex}
\end{center}
```

\tiny
```bash
# On créé un secret, on le chiffre et on l'applique
kubectl create secret generic --dry-run=client -o yaml  mariadb \
   --from-literal=DB_NAME=grr --from-literal=DB_USER=grr --from-literal=DB_PASSWORD=grr_password \
   |kubeseal -o yaml > sealedsecret.yml
kubectl apply -f sealedsecret.yml
# On vérifie que le secret est créé par le contrôleur
kubectl get secret mariadb -o yaml
```

On peut désormais utiliser le secret !

```yaml
        - image: registry.plmlab.math.cnrs.fr/anf2024/grr:v4.3.5-docker-15
          name: grr-migrate
          # Injection des variables DB_NAME, DB_USER et DB_PASSWORD via le Secret
          envFrom:
            - secretRef:
              name: grr
          env:
            - name: DB_HOST
              value: "mariadb"
```
